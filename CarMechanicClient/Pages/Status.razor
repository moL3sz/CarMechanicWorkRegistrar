@page "/"
@inject HttpClient Http
@using Models
@using Data
@using Managers
@using Enums
@using System.Collections.Generic;
@using System.Diagnostics;

<PageTitle>Job Status</PageTitle>

<h1>Job Status</h1>
<h3>(Reload Count for testing = @reloadCount)</h3>

@if (jobs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped table-bordered table-sm">
        <thead class="thead-dark">
            <tr>
                <th>
                    <label @onclick=@(e=>SortColumn(e,0))>@attributeManager.attribute[0].show()</label>
                    <input type="text" id="textInput" name="textInput" oninput="@((ChangeEventArgs e) => searchBarOnChange(e.Value.ToString(), 0 ,async ()=>{ await getDataFromDatabase(); }))">
                </th>
                <th>
                    <label @onclick=@(e=>SortColumn(e,1))>@attributeManager.attribute[1].show()</label>
                    <input type="text" id="textInput" name="textInput" oninput="@((ChangeEventArgs e) => searchBarOnChange(e.Value.ToString(), 1 ,async ()=>{ await getDataFromDatabase(); }))">
                </th>
                <th>
                    <label @onclick=@(e=>SortColumn(e,2))>@attributeManager.attribute[2].show()</label>
                    <input type="text" id="textInput" name="textInput" oninput="@((ChangeEventArgs e) => searchBarOnChange(e.Value.ToString(), 2 ,async ()=>{ await getDataFromDatabase(); }))">
                </th>
                <th>
                    <label @onclick=@(e=>SortColumn(e,3))>@attributeManager.attribute[3].show()</label>
                    <input type="text" id="textInput" name="textInput" oninput="@((ChangeEventArgs e) => searchBarOnChange(e.Value.ToString(), 3,async ()=>{ await getDataFromDatabase(); }))">
                </th>
                <th>
                    <label @onclick=@(e=>SortColumn(e,4))>@attributeManager.attribute[4].show()</label>
                    <input type="text" id="textInput" name="textInput" oninput="@((ChangeEventArgs e) => searchBarOnChange(e.Value.ToString(), 4 ,async ()=>{ await getDataFromDatabase(); }))">
                </th>
                <th>
                    <label @onclick=@(e=>SortColumn(e,5))>@attributeManager.attribute[5].show()</label>
                    <input type="text" id="textInput" name="textInput" oninput="@((ChangeEventArgs e) => searchBarOnChange(e.Value.ToString(), 5 ,async ()=>{ await getDataFromDatabase(); }))">
                </th>
                <th>
                    <label @onclick=@(e=>SortColumn(e,6))>@attributeManager.attribute[6].show()</label>
                    <input type="text" id="textInput" name="textInput" oninput="@((ChangeEventArgs e) => searchBarOnChange(e.Value.ToString(), 6 ,async ()=>{ await getDataFromDatabase(); }))">
                </th>
                <th>
                    <label @onclick=@(e=>SortColumn(e,7))>@attributeManager.attribute[7].show()</label>
                    <input type="text" id="textInput" name="textInput" oninput="@((ChangeEventArgs e) => searchBarOnChange(e.Value.ToString(), 7 ,async ()=>{ await getDataFromDatabase(); }))">
                </th>
                <th>
                    <label @onclick=@(e=>SortColumn(e,8))>@attributeManager.attribute[8].show()</label>
                    <input type="text" id="textInput" name="textInput" oninput="@((ChangeEventArgs e) => searchBarOnChange(e.Value.ToString(), 8 ,async ()=>{ await getDataFromDatabase(); }))">
                </th>
                <th>
                    <label @onclick=@(e=>SortColumn(e,9))>@attributeManager.attribute[9].show()</label>
                    <input type="text" id="textInput" name="textInput" oninput="@((ChangeEventArgs e) => searchBarOnChange(e.Value.ToString(), 9 ,async ()=>{ await getDataFromDatabase(); }))">
                </th>
                <th>
                    <label @onclick=@(e=>SortColumn(e,10))>@attributeManager.attribute[10].show()</label>
                    <input type="text" id="textInput" name="textInput" oninput="@((ChangeEventArgs e) => searchBarOnChange(e.Value.ToString(), 10 ,async ()=>{ await getDataFromDatabase(); }))">
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in jobs)
            {
                <tr>
                    <td>@job.ClientFirstName</td>
                    <td>@job.ClientLastName</td>
                    <td>@job.CarType</td>
                    <td>@job.LicencePlateNumber</td>
                    <td>@job.ManuFactureYear</td>
                    <td>@job.WorkCatagory</td>
                    <td @onclick=@(e=>clickOnDescription(e,job.WorkflowId))>@textShortener(job.WorkflowId,job.Description)</td>
                    <td>@job.IssueSeriousness</td>
                    <td>@job.CreatedDate</td>
                    <td>@fancyWorktimeText(@job.WorktimeEstimination)</td>
                    <button class="btn @buttonStatusColor(job)" @onclick=@(e=>ProceedWorkStatus(e,job))>@job.WorkStatus</button>
                </tr>
            }
            
        </tbody>
    </table>
    <table class="options">
        <thead>
            <tr>
                <td>
                    <label for="pageSizeDropdown">Page Size:</label>
                    <select id="pageSizeDropdown" name="pageSizeDropdown" onchange="@((ChangeEventArgs e) => pageManager.setPageSize(e.Value.ToString(),async ()=>{ await getDataFromDatabase(); }))">
                        <option value="5">5</option>
                        <option value="10" selected>10</option>
                        <option value="15">15</option>
                        <option value="30">30</option>
                    </select>
                </td>
                <td> <button class="btn btn-primary" @onclick=@(e=>pageManager.changePage(e,-1,async ()=>{ await getDataFromDatabase(); }))> Back </button> </td>
                <td> @pageManager.showPageCount() </td>
                <td> <button class="btn btn-primary" @onclick=@(e=>pageManager.changePage(e, 1,async ()=>{ await getDataFromDatabase(); }))> Next </button> </td>
            </tr>
            <tr>
                <td>@attributeManager.getSearchPrompt()</td>
            </tr>
        </thead>
    </table>
}

@code {
    Action<object> createHandler(int i)
    {
        return (value) =>
        {
            // use i here
            Console.WriteLine(i);
        };
    }


    private Workflow[]? jobs;
    private AttributeManager attributeManager = new AttributeManager();
    private PageManager pageManager = new PageManager();
    private int selectedDescription = -1;
    private string searchBarText = "";
    private double searchDebounce = 0;
    Stopwatch stopwatch = new Stopwatch();

    public int reloadCount = 0;

    protected override async Task OnInitializedAsync()
    {
        await getDataFromDatabase();
        pageManager.maxElement = await Http.GetFromJsonAsync<int>(GlobalStaticVariables.apiURL + "/GetWorkflowSize");
        pageManager.calcMaxPage();
        stopwatch.Start();
    }

    protected async Task getDataFromDatabase()
    {
        reloadCount++;
        attributeManager.generateSearchPrompt();

        var response = await Http.PostAsJsonAsync(GlobalStaticVariables.apiURL + "/GetWorkflows", new { PageSize = pageManager.pageSize, PageNumber = pageManager.currentPage, OrderField = attributeManager.getActiveVariableName(), OrderDescand = attributeManager.getActiveDescending() });
        jobs = await response.Content.ReadFromJsonAsync<Workflow[]>();
    }

    private async Task ProceedWorkStatus(MouseEventArgs e, Workflow job)
    {
        if(job.WorkStatus != Enums.WorkStatus.DONE) job.WorkStatus++;

        await Http.PutAsJsonAsync(GlobalStaticVariables.apiURL + "/UpdateStatus/" + job.WorkflowId, new { });
    }

    private async Task SortColumn(MouseEventArgs e, int bId)
    {
        if(attributeManager.activeAttributeId == bId)
        {
            if(attributeManager.attribute[bId].getSortIndicator() == 1) attributeManager.attribute[bId].setSortIndicator(2);
            else attributeManager.attribute[bId].setSortIndicator(1);
        }
        else
        {
            attributeManager.attribute[attributeManager.activeAttributeId].setSortIndicator(0);
            attributeManager.attribute[bId].setSortIndicator(1);
            attributeManager.activeAttributeId = bId;
        }
        await getDataFromDatabase();
    }

    private string textShortener(int id,string text)
    {
        if (selectedDescription != id && text.Length > 20)
        {
            text = text.Substring(0, 20);
            text = text + "...";
        }
        return text;
    }

    private void clickOnDescription(MouseEventArgs e, int id)
    {
        if (selectedDescription == id) selectedDescription = -1;
        else selectedDescription = id;
    }

    private string fancyWorktimeText(double time)
    {
        int hour = (int)time;
        double minute = (time - hour) * 60;
        return hour.ToString() + ":" + minute.ToString("00") + " hours";
    }

    public async Task searchBarOnChange(string text, int id, Func<Task> callback)
    {
        attributeManager.attribute[id].setSearchbarText(text);

        await Task.Delay(1500);

        if (stopwatch.Elapsed.TotalMilliseconds - searchDebounce > 1500)
        {
            searchDebounce = stopwatch.Elapsed.TotalMilliseconds;
            await callback();
        }
        //TODO: send the search term to API
    }

    public string buttonStatusColor(Workflow job)
    {
        
        if (job != null)
        {
            switch (job.WorkStatus)
            {
                case WorkStatus.ACCEPTED: return "btn-info";
                case WorkStatus.WORKING_PROGRESS: return "btn-warning";
                case WorkStatus.DONE: return "btn-success";
                default: return "btn-primary";
            }
        }
        
        return "btn-primary";
    }
}

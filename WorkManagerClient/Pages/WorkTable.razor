@page "/worktable"
@inject HttpClient Http
@inject NavigationManager Navigation
@using System.ComponentModel.DataAnnotations;
@using System.ComponentModel;
@using Microsoft.Extensions.Logging
@using Models;
@using Data;
@using Managers;

<PageTitle>Felvett munkák</PageTitle>

<h1>Felvett munkák</h1>
<div class="float-end form-group mb-2">
    <input type="text" id="textInput" placeholder="Search" name="textInput" class="form-control" oninput="@((ChangeEventArgs e) => searchBarOnChange(e.Value.ToString(),async ()=>{ await getDataFromDatabase(); }))">
</div>

<table class="table table-bordered thead-dark table-striped table-hover">


    <thead class="thead-light">
        <tr>
            <th scope="col" @onclick=@(e=>SortColumn(e,0))>@attributeManager.attribute[0].show()</th>
            <th scope="col" @onclick=@(e=>SortColumn(e,1))>@attributeManager.attribute[1].show()</th>
            <th scope="col" @onclick=@(e=>SortColumn(e,2))>@attributeManager.attribute[2].show()</th>
            <th scope="col" @onclick=@(e=>SortColumn(e,3))>@attributeManager.attribute[3].show()</th>
            <th scope="col" @onclick=@(e=>SortColumn(e,4))>@attributeManager.attribute[4].show()</th>
            <th scope="col" @onclick=@(e=>SortColumn(e,5))>@attributeManager.attribute[5].show()</th>
            <th scope="col" @onclick=@(e=>SortColumn(e,6))>@attributeManager.attribute[6].show()</th>
            <th scope="col" @onclick=@(e=>SortColumn(e,7))>@attributeManager.attribute[7].show()</th>
            <td scope="col"></td>
        </tr>
    </thead>
    <tbody>
        @foreach (var work in workFlow)
        {
            <tr>
                <td scope="col">@work.ClientFirstName</td>
                <td scope="col">@work.ClientLastName</td>
                <td scope="col">@work.CarType</td>
                <td scope="col">@work.LicencePlateNumber</td>
                <td scope="col">@work.ManufactureYear</td>
                <td scope="col">@work.WorkCatagory.GetDescription()</td>
                <td scope="col" @onclick=@(e=>clickOnDescription(e,work.WorkflowId))>@textShortener(work.WorkflowId,work.Description)</td>
                <td scope="col">@work.IssueSeriousness</td>
                <td scope="col">
                    <button class="btn btn-primary" @onclick=@(e=>clickOnEdit(e, work.WorkflowId))>Edit</button>

                </td>
            </tr>
        }

    </tbody>
</table>
<div class="options">
    <div class="d-flex flex-row justify-content-between align-items-center">
        <div class="">
            <label for="pageSizeDropdown">Page Size:</label>
            <select id="pageSizeDropdown" class="form-control" style="width: 10rem;" name="pageSizeDropdown" onchange="@((ChangeEventArgs e) => pageManager.setPageSize(e.Value.ToString(),async ()=>{ await getDataFromDatabase(); }))">
                <option value="5">5</option>
                <option value="10" selected>10</option>
                <option value="15">15</option>
                <option value="30">30</option>
            </select>
        </div>

        <div class="float-end d-flex flex-row justify-content-center align-items-center">
            <button class="btn btn-primary" @onclick=@(e=>pageManager.changePage(e,-1,async ()=>{ await getDataFromDatabase(); }))> Back </button>
            <div class="mx-4">@pageManager.showPageCount()</div>
            <button class="btn btn-primary" @onclick=@(e=>pageManager.changePage(e, 1,async ()=>{ await getDataFromDatabase(); }))> Next </button>
        </div>
    </div>



</div>


@code {
    private Workflow[]? workFlow = new Workflow[0];
    private AttributeManager attributeManager = new AttributeManager();
    private PageManager pageManager = new PageManager();
    private int selectedDescription = -1;
    private string searchBarText = "";

    protected override async Task OnInitializedAsync()
    {
        //var response = await Http.PostAsJsonAsync(GlobalStaticVariables.apiurl + "/GetWorkflows", new { });
        //workFlow = await response.Content.ReadFromJsonAsync<Workflow[]>();

        await getDataFromDatabase();
        pageManager.maxElement = await Http.GetFromJsonAsync<int>(GlobalStaticVariables.apiurl + "/GetWorkflowSize");
        pageManager.calcMaxPage();
    }

    private async void clickOnEdit(MouseEventArgs e, int id)
    {
        Navigation.NavigateTo($"/{id}");
    }

    private void clickOnDescription(MouseEventArgs e, int id)
    {
        if (selectedDescription == id) selectedDescription = -1;
        else selectedDescription = id;
    }

    private string textShortener(int id, string text)
    {
        if (selectedDescription != id && text.Length > 20)
        {
            text = text.Substring(0, 20);
            text = text + "...";
        }
        return text;
    }

    public async Task searchBarOnChange(string text, Func<Task> callback)
    {
        searchBarText = text;
        await callback();
        //TODO: send the search term to API
    }

    protected async Task getDataFromDatabase()
    {
        var response = await Http.PostAsJsonAsync(GlobalStaticVariables.apiurl + "/GetWorkflows", new { PageSize = pageManager.pageSize, PageNumber = pageManager.currentPage, OrderField = attributeManager.getActiveVariableName(), OrderDescand = attributeManager.getActiveDescending() });
        workFlow = await response.Content.ReadFromJsonAsync<Workflow[]>();
    }

    private async Task SortColumn(MouseEventArgs e, int bId)
    {
        if (attributeManager.activeAttributeId == bId)
        {
            if (attributeManager.attribute[bId].getSortIndicator() == 1) attributeManager.attribute[bId].setSortIndicator(2);
            else attributeManager.attribute[bId].setSortIndicator(1);
        }
        else
        {
            attributeManager.attribute[attributeManager.activeAttributeId].setSortIndicator(0);
            attributeManager.attribute[bId].setSortIndicator(1);
            attributeManager.activeAttributeId = bId;
        }
        await getDataFromDatabase();
    }
}
